"""
Django settings for bco_editor project.

Generated by 'django-admin startproject' using Django 3.0.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# ALTERED
# For importing schema.
from api.scripts import SettingsUtils

# ALTERED
# Load the settings file.
settings_from_file = SettingsUtils.SettingsUtils().load_settings_file(file_path='./server.conf')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$vz@#@^q(od&$rf&*6^z!m5nh6qw2*cq*j6fha#^h9(r7$xqy4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALTERED.
ALLOWED_HOSTS = settings_from_file['HOSTNAMES']

# ALTERED - FIX LATER.
HUMAN_READABLE_HOSTNAME = 'BCO Server (Default)'


# Application definition
#ALTERED
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bco_api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bco_api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
# ALTERED
TIME_ZONE = 'EST'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# ----- CUSTOM VARIABLES AND METHODS ----- #


# Load request and validation templates (definitions).

# Note that we will get TWO loads of settings.py if we start without runserver --noreload

# There is only set of definitions for requests, but for validations, we may have sub-folders.


'''
# FIX LATER

# First, the request definitions.
REQUEST_TEMPLATES = SettingsUtils.SettingsUtils().load_schema_local(search_parameters={
    settings_from_file['REQUESTS']['folder']: '.schema'
}, mode = 'requests')

# Define the schema for each request type.
REQUEST_TEMPLATES = SettingsUtils.SettingsUtils().define_request_schema(schema=REQUEST_TEMPLATES['request_definitions/'])


# The validation situation is more complex.

# First, we need to get all of the folders under validation_definitions.
VALIDATION_TEMPLATES = SettingsUtils.SettingsUtils().load_schema_local(search_parameters={
    settings_from_file['VALIDATIONS']['folder']: '.schema'
}, mode = 'validations')
'''


# First, the request definitions.
REQUEST_TEMPLATES = SettingsUtils.SettingsUtils().load_schema_local(search_parameters={
    'request_definitions/': '.schema'
}, mode = 'requests')

# Define the schema for each request type.
REQUEST_TEMPLATES = SettingsUtils.SettingsUtils().define_request_schema(schema=REQUEST_TEMPLATES['request_definitions/'])


# The validation situation is more complex.

# First, we need to get all of the folders under validation_definitions.
VALIDATION_TEMPLATES = SettingsUtils.SettingsUtils().load_schema_local(search_parameters={
    'validation_definitions/': '.schema'
}, mode = 'validations')

# Make the object naming accessible.
OBJECT_NAMING = settings_from_file['OBJECT_NAMING']

